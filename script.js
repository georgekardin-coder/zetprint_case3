let currentUser = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  const savedUser = localStorage.getItem('currentUser');
  if (savedUser) {
    currentUser = savedUser;
    displayUserInfo();
    loadSubscriptionList();
    renderPostsFeed();
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleLogin() {
  const usernameInput = document.getElementById('username');
  const username = usernameInput.value.trim();

  if (!username) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return;
  }

  currentUser = username;
  localStorage.setItem('currentUser', username);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  if (!localStorage.getItem(`user_${username}_posts`)) {
    localStorage.setItem(`user_${username}_posts`, JSON.stringify([]));
  }
  if (!localStorage.getItem(`user_${username}_subscriptions`)) {
    localStorage.setItem(`user_${username}_subscriptions`, JSON.stringify([]));
  }

  displayUserInfo();
  document.getElementById('post-form').style.display = 'block';
  usernameInput.value = '';
  loadSubscriptionList();
  renderPostsFeed();
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function handleLogout() {
  currentUser = null;
  localStorage.removeItem('currentUser');
  document.getElementById('user-info').style.display = 'none';
  document.getElementById('login-form').style.display = 'block';
  document.getElementById('post-form').style.display = 'none';
  renderPostsFeed();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function displayUserInfo() {
  document.getElementById('current-user').textContent = currentUser;
  document.getElementById('user-info').style.display = 'block';
  document.getElementById('login-form').style.display = 'none';
  document.getElementById('post-form').style.display = 'block';
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleSubscribe() {
  if (!currentUser) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
    return;
  }

  const targetUser = document.getElementById('subscribe-to').value.trim();
  if (!targetUser) {
    alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.');
    return;
  }

  if (targetUser === currentUser) {
    alert('–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.');
    return;
  }

  const subscriptions = JSON.parse(localStorage.getItem(`user_${currentUser}_subscriptions`) || '[]');
  if (subscriptions.includes(targetUser)) {
    alert('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return;
  }

  subscriptions.push(targetUser);
  localStorage.setItem(`user_${currentUser}_subscriptions`, JSON.stringify(subscriptions));
  alert(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ ${targetUser}.`);
  loadSubscriptionList();
  renderPostsFeed();
  document.getElementById('subscribe-to').value = '';
}

// –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function handleUnsubscribe(username) {
  const subscriptions = JSON.parse(localStorage.getItem(`user_${currentUser}_subscriptions`) || '[]');
  const updatedSubscriptions = subscriptions.filter(user => user !== username);
  localStorage.setItem(`user_${currentUser}_subscriptions`, JSON.stringify(updatedSubscriptions));
  loadSubscriptionList();
  renderPostsFeed();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
function loadSubscriptionList() {
  const container = document.getElementById('subscription-list');
  if (!currentUser) {
    container.innerHTML = '<p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.</p>';
    return;
  }

  const subscriptions = JSON.parse(localStorage.getItem(`user_${currentUser}_subscriptions`) || '[]');
  if (subscriptions.length === 0) {
    container.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.</p>';
    return;
  }

  container.innerHTML = subscriptions.map(user => `
    <span class="subscription-item">
      ${user}
      <button onclick="handleUnsubscribe('${user}')">–û—Ç–ø–∏—Å–∞—Ç—å—Å—è</button>
    </span>
  `).join('');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
function handleCreatePost() {
  if (!currentUser) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
    return;
  }

  const content = document.getElementById('post-content').value.trim();
  const tagInput = document.getElementById('post-tags').value;
  const isPrivate = document.getElementById('private-post').checked;

  if (!content) {
    alert('–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    return;
  }

  const tags = tagInput.split(',').map(tag => tag.trim()).filter(tag => tag !== '');

  const newPost = {
    id: Date.now().toString(),
    author: currentUser,
    content: content,
    tags: tags,
    isPrivate: isPrivate,
    comments: [],
    createdAt: new Date().toLocaleString('ru-RU')
  };

  const userPosts = JSON.parse(localStorage.getItem(`user_${currentUser}_posts`) || '[]');
  userPosts.push(newPost);
  localStorage.setItem(`user_${currentUser}_posts`, JSON.stringify(userPosts));

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  document.getElementById('post-content').value = '';
  document.getElementById('post-tags').value = '';
  document.getElementById('private-post').checked = false;

  renderPostsFeed();
  alert('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.');
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤
function renderPostsFeed() {
  const container = document.getElementById('posts-feed');
  if (!currentUser) {
    container.innerHTML = '<p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ª–µ–Ω—Ç—É –ø–æ—Å—Ç–æ–≤.</p>';
    return;
  }

  const subscriptions = JSON.parse(localStorage.getItem(`user_${currentUser}_subscriptions`) || '[]');
  const authorsToDisplay = [...subscriptions, currentUser];

  let allPosts = [];

  authorsToDisplay.forEach(author => {
    const authorPosts = JSON.parse(localStorage.getItem(`user_${author}_posts`) || '[]');
    authorPosts.forEach(post => {
      allPosts.push({ ...post, author: author });
    });
  });

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  allPosts.sort((a, b) => b.id - a.id);

  if (allPosts.length === 0) {
    container.innerHTML = '<p>–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ–ø—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–∏—Å—å!</p>';
    return;
  }

  container.innerHTML = allPosts.map(post => {
    const isAuthor = post.author === currentUser;
    const canViewContent = isAuthor || !post.isPrivate;

    let postHTML = `
      <div class="post ${post.isPrivate ? 'private' : ''}">
        <h3>–ê–≤—Ç–æ—Ä: ${post.author}</h3>
        <p>${canViewContent ? post.content : 'üîí –≠—Ç–æ—Ç –ø–æ—Å—Ç —Å–∫—Ä—ã—Ç. –î–æ—Å—Ç—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.'}</p>
    `;

    if (post.isPrivate && !isAuthor) {
      postHTML += `
        <button onclick="alert('–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É. –í –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.')">
          –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø
        </button>
      `;
    }

    postHTML += `
        <div class="meta">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${post.createdAt}</div>
        <div class="tags">
          ${post.tags.map(tag => `<span>#${tag}</span>`).join('')}
        </div>
    `;

    if (isAuthor) {
      postHTML += `
        <div class="actions">
          <button onclick="handleEditPost('${post.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
          <button onclick="handleDeletePost('${post.id}')">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    postHTML += `
        <div class="comment-section">
          <h4>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (${post.comments.length})</h4>
          <textarea id="comment_${post.id}" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."></textarea>
          <button onclick="handleAddComment('${post.id}', '${post.author}')">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
          <div id="comments_${post.id}">
            ${post.comments.map(comment => `
              <div class="comment">
                <strong>${comment.author}:</strong> ${comment.text}
              </div>
            `).join('')}
          </div>
        </div>
      </div>
    `;

    return postHTML;
  }).join('');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
function handleEditPost(postId) {
  const userPosts = JSON.parse(localStorage.getItem(`user_${currentUser}_posts`) || '[]');
  const post = userPosts.find(p => p.id === postId);

  if (!post) return;

  const updatedContent = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:', post.content);
  if (updatedContent === null) return;

  post.content = updatedContent;
  localStorage.setItem(`user_${currentUser}_posts`, JSON.stringify(userPosts));
  renderPostsFeed();
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
function handleDeletePost(postId) {
  if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?')) return;

  const userPosts = JSON.parse(localStorage.getItem(`user_${currentUser}_posts`) || '[]');
  const updatedPosts = userPosts.filter(p => p.id !== postId);
  localStorage.setItem(`user_${currentUser}_posts`, JSON.stringify(updatedPosts));
  renderPostsFeed();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function handleAddComment(postId, postAuthor) {
  if (!currentUser) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.');
    return;
  }

  const commentTextarea = document.getElementById(`comment_${postId}`);
  const commentText = commentTextarea.value.trim();

  if (!commentText) {
    alert('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞
  let authorPosts = JSON.parse(localStorage.getItem(`user_${postAuthor}_posts`) || '[]');
  const post = authorPosts.find(p => p.id === postId);

  if (!post) return;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  post.comments.push({
    author: currentUser,
    text: commentText,
    createdAt: new Date().toLocaleString('ru-RU')
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  localStorage.setItem(`user_${postAuthor}_posts`, JSON.stringify(authorPosts));

  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–µ–Ω—Ç—É
  commentTextarea.value = '';
  renderPostsFeed();
}